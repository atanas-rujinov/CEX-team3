1. DELETE /account
   
| ID    | Description                         | Preconditions                                                | Steps                                                                            | Expected Result                                            |
| ----- | ----------------------------------- | ------------------------------------------------------------ | -------------------------------------------------------------------------------- | ---------------------------------------------------------- |
| DA-01 | **Happy**: correct password deletes | User `alice` exists with password `secret` (encrypted in DB) | 1. `DELETE /account`  <br>2. Body: `{ "username":"alice", "password":"secret" }` | 204 No Content; user `alice` no longer in database         |
| DA-02 | **Negative**: wrong password        | Same as DA-01                                                | 1. `DELETE /account`  <br>2. Body: `{ "username":"alice", "password":"wrong" }`  | 401 Unauthorized; account **not** deleted                  |
| DA-03 | **Negative**: non-existent user     | No user `bob`                                                | 1. `DELETE /account`  <br>2. Body: `{ "username":"bob", "password":"anything" }` | 404 Not Found (or 401 if your API masks "not found")       |
| DA-04 | **Negative**: missing fields        | –                                                            | 1. `DELETE /account`  <br>2. Body: `{ "username":"alice" }`                      | 400 Bad Request; error JSON explaining "password required" |


2. POST /account/edit-username

| ID    | Description                                | Preconditions                               | Steps                                                                                                  | Expected Result                                                |
| ----- | ------------------------------------------ | ------------------------------------------- | ------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------- |
| EU-01 | **Happy**: change to unused username       | User `alice` exists; new `bob` does **not** | 1. `POST /account/edit-username`  <br>2. Body: `{ "currentUsername":"alice", "newUsername":"bob" }`    | 200 OK; verify in GET/user or DB that `alice` → `bob`          |
| EU-02 | **Negative**: new username already exists  | Both `alice` and `charlie` exist            | 1. `POST /account/edit-username` <br>2. Body: `{ "currentUsername":"alice", "newUsername":"charlie" }` | 409 Conflict; JSON `error: "Username already in use"`          |
| EU-03 | **Negative**: current user not found       | No user `dave`                              | 1. `POST /account/edit-username` <br>2. Body: `{ "currentUsername":"dave", "newUsername":"davo" }`     | 404 Not Found                                                  |
| EU-04 | **Negative**: invalid new username (empty) | User `alice` exists                         | 1. `POST /account/edit-username` <br>2. Body: `{ "currentUsername":"alice", "newUsername":"" }`        | 400 Bad Request; JSON `error: "newUsername must not be empty"` |


3. POST /account/login

| ID    | Description                       | Preconditions                          | Steps                                                                                | Expected Result                                               |
| ----- | --------------------------------- | -------------------------------------- | ------------------------------------------------------------------------------------ | ------------------------------------------------------------- |
| LI-01 | **Happy**: valid credentials      | User `alice` exists, password `secret` | 1. `POST /account/login`  <br>2. Body: `{ "username":"alice", "password":"secret" }` | 200 OK; JSON `{ "message":"Login successful", "token": "…" }` |
| LI-02 | **Negative**: wrong password      | User `alice` exists                    | 1. `POST /account/login`  <br>2. Body: `{ "username":"alice", "password":"wrong" }`  | 401 Unauthorized; JSON `error: "Invalid credentials"`         |
| LI-03 | **Negative**: user does not exist | No user `eve`                          | 1. `POST /account/login`  <br>2. Body: `{ "username":"eve", "password":"anything" }` | 404 Not Found (or 401 to avoid user enumeration)              |
| LI-04 | **Negative**: missing fields      | –                                      | 1. `POST /account/login`  <br>2. Body: `{ "username":"alice" }`                      | 400 Bad Request; JSON `error: "password required"`            |


4. POST /account/edit-password

| ID    | Description                                                  | Preconditions                           | Steps                                                                                                                     | Expected Result                                                    |
| ----- | ------------------------------------------------------------ | --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------ |
| EP-01 | **Happy**: correct current password → change to new          | User `alice` exists, old password `old` | 1. `POST /account/edit-password`  <br>2. Body: `{ "username":"alice","currentPassword":"old","newPassword":"newSecret" }` | 200 OK; verify in DB that `alice`'s password hash changed          |
| EP-02 | **Negative**: wrong current password                         | User `alice` exists                     | 1. `POST /account/edit-password`  <br>2. Body: `{ "username":"alice","currentPassword":"bad","newPassword":"newSecret" }` | 401 Unauthorized; no change in DB                                  |
| EP-03 | **Negative**: new password fails validation (e.g. too short) | User `alice` exists                     | 1. `POST /account/edit-password`  <br>2. Body: `{ "username":"alice","currentPassword":"old","newPassword":"123" }`       | 400 Bad Request; JSON `error: "Password must be at least 8 chars"` |
| EP-04 | **Negative**: missing fields                                 | –                                       | 1. `POST /account/edit-password`  <br>2. Body: `{ "username":"alice","currentPassword":"old" }`                           | 400 Bad Request; JSON `error: "newPassword required"`              |


5. POST /account/signup

| ID    | Description                          | Preconditions           | Steps                                                                                      | Expected Result                                                               |
| ----- | ------------------------------------ | ----------------------- | ------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------- |
| SU-01 | **Happy**: register new user         | No user `frank` exists  | 1. `POST /account/signup`  <br>2. Body: `{ "username":"frank","password":"GoodPass123!" }` | 201 Created; JSON `{ "username":"frank" }`; check DB hash                     |
| SU-02 | **Negative**: username already taken | User `alice` exists     | 1. `POST /account/signup`  <br>2. Body: `{ "username":"alice","password":"Whatever" }`     | 409 Conflict; JSON `error: "Username already taken"`                          |
| SU-03 | **Negative**: password too weak      | No user `george` exists | 1. `POST /account/signup`  <br>2. Body: `{ "username":"george","password":"123" }`         | 400 Bad Request; JSON `error: "Password does not meet strength requirements"` |
| SU-04 | **Negative**: missing fields         | –                       | 1. `POST /account/signup`  <br>2. Body: `{ "username":"harry" }`                           | 400 Bad Request; JSON `error: "password required"`                            |


6. Create Admin Account

| Scenario ID | Scenario Type | Description                                                 | Preconditions                                                                                     | Steps                                                                                                                                                                        | Expected Result                                                                                                                                           |
| ----------- | ------------- | ----------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
| CA-1        | Happy         | Create a new admin account with valid JWT and valid payload | 1. An existing admin user has a valid JWT token.<br>2. The desired username is not already taken. | 1. Send POST /createAdminAccount with HTTP Header `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ "username": "newAdmin", "password": "StrongP@ssw0rd" }`. | 1. HTTP 201 Created.<br>2. Response body contains the new admin’s `id`, `username`, and a success message.<br>3. New admin appears in the “admins” table. |
| CA-2        | Negative      | Missing JWT in request header                               | 1. No JWT is provided.                                                                            | 1. Send POST /createAdminAccount without `Authorization` header.<br>2. Request body: `{ "username": "newAdmin", "password": "StrongP@ssw0rd" }`.                             | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Authentication token missing" }`.                                                                  |
| CA-3        | Negative      | Invalid JWT (malformed or expired)                          | 1. JWT token is malformed or expired.                                                             | 1. Send POST /createAdminAccount with `Authorization: Bearer <invalid_or_expired_JWT>`.<br>2. Request body: `{ "username": "newAdmin", "password": "StrongP@ssw0rd" }`.      | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Invalid or expired token" }`.                                                                      |
| CA-4        | Negative      | JWT belongs to a non-admin user                             | 1. JWT token is valid but corresponds to a normal (non-admin) account.                            | 1. Send POST /createAdminAccount with `Authorization: Bearer <valid_nonadmin_JWT>`.<br>2. Request body: `{ "username": "newAdmin", "password": "StrongP@ssw0rd" }`.          | 1. HTTP 403 Forbidden.<br>2. Response: `{ "error": "Insufficient privileges" }`.                                                                          |
| CA-5        | Negative      | Missing required fields (username or password)              | 1. Admin JWT is valid.                                                                            | 1. Send POST /createAdminAccount with `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ "username": "onlyUser" }` (password omitted).                        | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Missing required field: password" }`.                                                               |
| CA-6        | Negative      | Weak or invalid password format (e.g., too short)           | 1. Admin JWT is valid.<br>2. Password does not meet validation rules (e.g., length < 8).          | 1. Send POST /createAdminAccount with `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ "username": "newAdmin", "password": "abc" }`.                        | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Password does not meet complexity requirements" }`.                                                 |
| CA-7        | Negative      | Username already exists (duplicate)                         | 1. Admin JWT is valid.<br>2. An existing admin or user already uses the requested username.       | 1. Send POST /createAdminAccount with `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ "username": "existingAdmin", "password": "AnotherP@ss1" }`.          | 1. HTTP 409 Conflict.<br>2. Response: `{ "error": "Username already taken" }`.                                                                            |
7. Ban Account (banAccount)

| Scenario ID | Scenario Type | Description                           | Preconditions                                                                                                  | Steps                                                                                                                | Expected Result                                                                                                                            |
| ----------- | ------------- | ------------------------------------- | -------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| BA-1        | Happy         | Ban an existing normal user account   | 1. Admin has a valid JWT.<br>2. The target normal user (ID = 123) exists and is currently active (not banned). | 1. Send POST /banAccount with `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ "userId": 123 }`.    | 1. HTTP 200 OK.<br>2. Response: `{ "message": "User 123 successfully banned" }`.<br>3. Database: user 123’s `isBanned` flag set to `true`. |
| BA-2        | Negative      | Missing JWT in request header         | 1. No JWT provided.                                                                                            | 1. Send POST /banAccount without `Authorization` header.<br>2. Request body: `{ "userId": 123 }`.                    | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Authentication token missing" }`.                                                   |
| BA-3        | Negative      | Invalid or expired JWT token          | 1. JWT is expired or malformed.                                                                                | 1. Send POST /banAccount with `Authorization: Bearer <invalid_JWT>`.<br>2. Request body: `{ "userId": 123 }`.        | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Invalid or expired token" }`.                                                       |
| BA-4        | Negative      | JWT belongs to non-admin user         | 1. JWT is valid but corresponds to a normal account.                                                           | 1. Send POST /banAccount with `Authorization: Bearer <valid_nonadmin_JWT>`.<br>2. Request body: `{ "userId": 123 }`. | 1. HTTP 403 Forbidden.<br>2. Response: `{ "error": "Insufficient privileges" }`.                                                           |
| BA-5        | Negative      | Target userId is missing from payload | 1. Admin JWT is valid.                                                                                         | 1. Send POST /banAccount with `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ }`.                  | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Missing required field: userId" }`.                                                  |
| BA-6        | Negative      | Target userId does not exist          | 1. Admin JWT is valid.<br>2. No user with ID = 999 exists.                                                     | 1. Send POST /banAccount with `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ "userId": 999 }`.    | 1. HTTP 404 Not Found.<br>2. Response: `{ "error": "User not found" }`.                                                                    |
| BA-7        | Negative      | Target user is already banned         | 1. Admin JWT is valid.<br>2. User ID = 124 exists but is already banned.                                       | 1. Send POST /banAccount with `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ "userId": 124 }`.    | 1. HTTP 409 Conflict.<br>2. Response: `{ "error": "User is already banned" }`.                                                             |
| BA-8        | Negative      | Attempt to ban another admin user     | 1. Admin JWT is valid.<br>2. Target user ID = 45 is an admin.                                                  | 1. Send POST /banAccount with `Authorization: Bearer <valid_admin_JWT>`.<br>2. Request body: `{ "userId": 45 }`.     | 1. HTTP 403 Forbidden.<br>2. Response: `{ "error": "Cannot ban admin accounts" }`.                                                         |


8. View Balances (viewBalances)

| Scenario ID | Scenario Type | Description                                                  | Preconditions                                                                                      | Steps                                                                     | Expected Result                      |
| ----------- | ------------- | ------------------------------------------------------------ | -------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------ |
| VB-1        | Happy         | Retrieve both USD and crypto balances for authenticated user | 1. User has a valid JWT.<br>2. The user has existing balances in USD and various cryptocurrencies. | 1. Send GET /balances/view with `Authorization: Bearer <valid_user_JWT>`. | 1. HTTP 200 OK.<br>2. Response body: |


9. Deposit Funds (`deposit`)

| Scenario ID | Scenario Type | Description | Preconditions | Steps | Expected Result |
|-------------|---------------|-------------|---------------|-------|-----------------|
| DP-1 | Happy | Deposit a positive USD amount into user's fiat balance | 1. User has valid JWT.<br>2. Initial USD balance is $1000.00. | 1. Send POST /balances/deposit with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "USD", "amount": 500.00 }`. | 1. HTTP 200 OK.<br>2. Response: `{ "fiat": { "USD": 1500.00 } }`.<br>3. Database: USD balance updated to $1500.00. |
| DP-2 | Happy | Deposit a positive amount of cryptocurrency (e.g., ETH) | 1. User has valid JWT.<br>2. Initial ETH balance is 1.50. | 1. Send POST /balances/deposit with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "ETH", "amount": 0.25 }`. | 1. HTTP 200 OK.<br>2. Response: `{ "crypto": { "ETH": 1.75 } }`.<br>3. Database: ETH balance updated to 1.75. |
| DP-3 | Negative | Missing JWT in request header | 1. No JWT provided. | 1. Send POST /balances/deposit without `Authorization` header.<br>2. Request body: `{ "currency": "USD", "amount": 100.00 }`. | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Authentication token missing" }`. |
| DP-4 | Negative | Invalid or expired JWT token | 1. JWT is malformed or expired. | 1. Send POST /balances/deposit with `Authorization: Bearer <invalid_JWT>`.<br>2. Request body: `{ "currency": "USD", "amount": 100.00 }`. | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Invalid or expired token" }`. |
| DP-5 | Negative | Negative or zero amount | 1. User has valid JWT. | 1. Send POST /balances/deposit with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "USD", "amount": -50.00 }`. | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Amount must be greater than zero" }`. |
| DP-6 | Negative | Unsupported currency code | 1. User has valid JWT. | 1. Send POST /balances/deposit with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "DOGE", "amount": 100.00 }`. | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Unsupported currency: DOGE" }`. |
| DP-7 | Negative | Missing required fields (currency or amount) | 1. User has valid JWT. | 1. Send POST /balances/deposit with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "amount": 100.00 }` (no currency). | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Missing required field: currency" }`. |

10. Withdraw Funds (`withdraw`)

| Scenario ID | Scenario Type | Description | Preconditions | Steps | Expected Result |
|-------------|---------------|-------------|---------------|-------|-----------------|
| WD-1 | Happy | Withdraw a valid USD amount when sufficient balance exists | 1. User has a valid JWT.<br>2. USD balance = $2000.00. | 1. Send POST /balances/withdraw with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "USD", "amount": 1500.00 }`. | 1. HTTP 200 OK.<br>2. Response: `{ "fiat": { "USD": 500.00 } }`.<br>3. Database: USD balance updated to $500.00. |
| WD-2 | Happy | Withdraw a valid crypto amount when sufficient balance exists | 1. User has valid JWT.<br>2. ETH balance = 3.00. | 1. Send POST /balances/withdraw with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "ETH", "amount": 2.00 }`. | 1. HTTP 200 OK.<br>2. Response: `{ "crypto": { "ETH": 1.00 } }`.<br>3. Database: ETH balance updated to 1.00. |
| WD-3 | Negative | Missing JWT in request header | 1. No JWT provided. | 1. Send POST /balances/withdraw without `Authorization` header.<br>2. Request body: `{ "currency": "USD", "amount": 100.00 }`. | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Authentication token missing" }`. |
| WD-4 | Negative | Invalid or expired JWT token | 1. JWT is malformed or expired. | 1. Send POST /balances/withdraw with `Authorization: Bearer <invalid_JWT>`.<br>2. Request body: `{ "currency": "USD", "amount": 100.00 }`. | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Invalid or expired token" }`. |
| WD-5 | Negative | Insufficient funds for requested withdrawal | 1. User has valid JWT.<br>2. USD balance = $200.00. | 1. Send POST /balances/withdraw with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "USD", "amount": 500.00 }`. | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Insufficient funds" }`. |
| WD-6 | Negative | Negative or zero withdrawal amount | 1. User has valid JWT. | 1. Send POST /balances/withdraw with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "USD", "amount": 0 }`. | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Amount must be greater than zero" }`. |
| WD-7 | Negative | Unsupported currency code | 1. User has valid JWT. | 1. Send POST /balances/withdraw with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "LTC", "amount": 10.0 }`. | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Unsupported currency: LTC" }`. |
| WD-8 | Negative | Missing required fields (currency or amount) | 1. User has valid JWT. | 1. Send POST /balances/withdraw with `Authorization: Bearer <valid_user_JWT>`.<br>2. Request body: `{ "currency": "ETH" }` (amount omitted). | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Missing required field: amount" }`. |

11. JWT Token Validation Endpoint (`validateToken`)

| Scenario ID | Scenario Type | Description | Preconditions | Steps | Expected Result |
|-------------|---------------|-------------|---------------|-------|-----------------|
| JT-1 | Happy | Validate a well-formed, unexpired JWT and return associated user ID | 1. Client obtains a valid JWT via login. | 1. Send POST /jwt/validate with `Authorization: Bearer <valid_JWT>`.<br>2. No request body required. | 1. HTTP 200 OK.<br>2. Response: `{ "userId": 789 }` (the ID encoded in the token). |
| JT-2 | Negative | Missing JWT in request header | 1. No JWT provided. | 1. Send POST /jwt/validate without `Authorization` header. | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Authentication token missing" }`. |
| JT-3 | Negative | Malformed or syntactically invalid token | 1. Token string doesn’t follow `header.payload.signature` format. | 1. Send POST /jwt/validate with `Authorization: Bearer invalid.token.string`.<br>2. No request body. | 1. HTTP 400 Bad Request.<br>2. Response: `{ "error": "Malformed token" }`. |
| JT-4 | Negative | Expired token | 1. JWT was valid but its `exp` claim is in the past. | 1. Send POST /jwt/validate with `Authorization: Bearer <expired_JWT>`.<br>2. No request body. | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Token expired" }`. |
| JT-5 | Negative | Token signed with incorrect secret (signature invalid) | 1. Token structure is correct but signature doesn’t match server secret. | 1. Send POST /jwt/validate with `Authorization: Bearer <tampered_or_wrong_secret_JWT>`.<br>2. No request body. | 1. HTTP 401 Unauthorized.<br>2. Response: `{ "error": "Invalid token signature" }`. |
